// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.5.3 model.gltf --transform 
// Files: model.gltf [198.02KB] > C:\Users\DELL\OneDrive\Document\Programming\coding_practice\react\tarotWebService\back\front\public\assets\model\character-fbx\model-transformed.glb [6.19MB] (-3026%)
// */
// import React, {
//   memo,
//   useCallback,
//   useEffect,
//   useMemo,
//   useRef,
//   useState,
// } from 'react';
// import { useGraph } from '@react-three/fiber';
// import { useGLTF, useAnimations } from '@react-three/drei';
// import { SkeletonUtils } from 'three-stdlib';
// import { useCrystalAction } from '../../../Action/useCrystalAction';
// import { useCandleAction } from '../../../Action/useCandleAction';
// import {
//   useWindowLeftDoorAction,
//   useWindowRightDoorAction,
// } from '../../../Action/useWindowDoorAction';
// import { useGlowBallAction } from '../../../Action/useGlowBallAction';
// import { hasAccessToken } from '../../../../../utils/storage/tokenCookie';
// import { hasAccessTokenForPreference } from '../../../../../utils/storage/tokenPreference';
// import { Capacitor } from '@capacitor/core';
// const isNative = Capacitor.isNativePlatform();
// const MODEL_PATH = '/assets/model/character-fbx/model.glb';

// export default memo(function Model({
//   stateGroup,
//   setStateGroup,
//   toggleModalGroup,
//   handleStateGroup,
//   setTalkBubbleClosed,
//   updateTarotManualModalOpen,
//   isDoneAnimationOfBackground,
//   visible, // invisibleDuringPlaying
//   userInfo,
//   isClickedForTodayCard,
//   ...props
// }) {
//   const {
//     answerForm,
//     cardForm,
//     questionForm,
//     modalForm,
//     whichTarot,
//     cssInvisible,
//     country,
//     isReadyToShowDurumagi,
//     ...rest
//   } = stateGroup;

//   const {
//     updateBlinkModalForLoginOpen,
//     updateCardForm,
//     setAdsWatched,
//     ...restOfSetStateGroup
//   } = setStateGroup;

//   const { toggleSpreadModal, toggleTarotModal } = toggleModalGroup;
//   const {
//     handleAnsweredState,
//     handleCardForm,
//     handleQuestionForm,
//     handleResetAll,
//     handleResetDeck,
//     handleSpreadValue,
//     handleWhichTarot,
//     ...rest2
//   } = handleStateGroup;

//   const group = useRef();
//   const [windowLeftDoorMaterialAction, setWindowLeftDoorAction] =
//     useState(false);
//   const [windowRightDoorMaterialAction, setWindowRightDoorAction] =
//     useState(false);
//   const [leftDoorClick, setLeftDoorClick] = useState(0);
//   const [rightDoorClick, setRightDoorClick] = useState(0);
//   const [isMagicOn, setMagicOn] = useState(false);
//   const gltfResult = useGLTF(MODEL_PATH);
//   let { scene, animations, ...propsOfGLTF } = useMemo(
//     () => gltfResult,
//     [gltfResult]
//   );
//   // const { scene, nodes, materials, animations } = useMemo(
//   //   () => gltfResult,
//   //   [gltfResult]
//   // );

//   let clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
//   let { nodes, materials } = useGraph(clone);
//   let { actions, mixer } = useAnimations(animations, group);
//   // console.log('Model.jsx에서 찍는 actions : ', actions);
//   const [time, setTime] = useState(0);
//   const openTarotManualModal = useCallback(
//     e => {
//       e.stopPropagation();
//       if (answerForm?.isWaiting === true || !visible) return;
//       updateTarotManualModalOpen(true);
//     },
//     [updateTarotManualModalOpen]
//   );

//   //! <primitive object={scene} />만 return 하면 자동 정리됨. Three.js의 씬 관리에 렌더링을 위임하므로 리소스 처리
//   //! <group>과 <mesh> 컴포넌트를 사용하여 복잡한 계층 구조 형성시, React나 Three.js에 의해 자동으로 정리되지 않습니다.
//   //! 지오메트리와 머티리얼: 각 <mesh>는 nodes와 materials에서 가져온 geometry와 material을 참조합니다. 이들은 언마운트 시 정리되지 않아 GPU 메모리에 남습니다.
//   // 텍스처: 머티리얼은 종종 텍스처를 참조합니다(예: materials.crystal_ball에 텍스처 포함). 텍스처는 메모리 소모가 크며 명시적으로 정리해야 합니다.
//   // 복제된 씬: SkeletonUtils.clone(scene)은 모든 지오메트리, 머티리얼, 텍스처를 복제하여 메모리 사용량을 두 배로 늘립니다. 복제된 씬이 정리되지 않으면 누수가 발생합니다.
//   // 애니메이션 믹서: mixer는 씬 객체에 대한 참조를 유지하며, 정지되거나 정리되지 않으면 가비지 컬렉션을 방해합니다.
//   // 이벤트 리스너: onClick 핸들러는 Three.js 객체를 참조할 수 있으며, 제거되지 않으면 메모리에 남습니다.
//   /**1. 복잡한 계층 구조를 사용한 것
// 복잡한 계층 구조(즉, <group>과 <mesh>로 구성된 JSX 계층)를 사용한 것은 메모리 누수에 간접적으로 기여합니다. 이유는 다음과 같습니다:

// 많은 Three.js 객체 참조: 두 번째 코드는 nodes와 materials에서 추출한 수많은 지오메트리와 머티리얼을 개별 <mesh> 컴포넌트에 명시적으로 바인딩합니다. 이는 수십 개의 메쉬와 머티리얼 객체를 React 컴포넌트 트리에 직접 연결하게 되어, 각 객체가 메모리에 유지됩니다.
// 수동 관리의 복잡성: 복잡한 계층 구조를 JSX로 정의하면, 각 <mesh>와 <group>이 참조하는 Three.js 객체(지오메트리, 머티리얼, 텍스처 등)를 수동으로 관리해야 합니다. 이 과정에서 실수로 리소스 정리를 누락하기 쉽습니다.
// 리렌더링 문제: 복잡한 계층 구조는 상태 변경(예: setTime, setLeftDoorClick)으로 인한 리렌더링 시 새로운 참조를 생성하거나 기존 참조를 덮어쓸 가능성을 높입니다. 이로 인해 이전 객체가 메모리에 남아있을 수 있습니다.
// 그러나 복잡한 계층 구조 자체만으로는 메모리 누수가 필연적으로 발생하지 않습니다. 만약 모든 Three.js 리소스가 컴포넌트 언마운트 시 적절히 정리된다면, 계층 구조의 복잡성만으로 누수가 발생하지 않을 것입니다. 따라서 복잡한 계층 구조는 메모리 누수를 악화시키는 요인일 뿐, 근본 원인은 아닙니다.

// 2. nodes와 materials로 분리해서 사용한 것
// nodes와 materials로 GLTF 씬을 분리해서 사용한 것이 메모리 누수의 주요 원인입니다. 아래에서 그 이유를 자세히 설명합니다:

// Three.js 객체의 명시적 참조:
// useGraph(clone)을 사용하여 GLTF 씬을 nodes와 materials로 분해하면, 각 노드(메쉬, 본 등)와 머티리얼이 개별적으로 추출됩니다. 이들은 Three.js의 BufferGeometry, Material, Texture 같은 객체를 직접 참조합니다.
// 두 번째 코드에서는 이러한 객체들을 JSX의 <mesh> 컴포넌트에 바인딩하여 렌더링합니다. 예를 들어, <mesh geometry={nodes.CrystalBallObject.geometry} material={materials.crystal_ball} />는 특정 지오메트리와 머티리얼을 참조합니다.
// 문제는 이 객체들이 Three.js의 메모리 관리 체계에 의해 자동으로 정리되지 않는다는 점입니다. Three.js는 WebGL 리소스를 사용하므로, dispose()를 명시적으로 호출하지 않으면 GPU 메모리에 남습니다.
// 정리 로직 부재:
// 두 번째 코드에는 nodes와 materials로 추출된 객체들을 언마운트 시 정리하는 로직이 없습니다. 따라서 geometry, material, 그리고 관련 텍스처가 메모리에 계속 남아, 페이지 새로고침마다 쌓입니다.
// 특히, 머티리얼에 포함된 텍스처(예: materials.crystal_ball.map)는 메모리 소모가 크며, 정리되지 않으면 누수가 심각해집니다.
// 복제된 씬의 추가 참조:
// 두 코드 모두 SkeletonUtils.clone(scene)을 사용하여 씬을 복제하지만, 두 번째 코드에서는 복제된 씬을 useGraph로 nodes와 materials로 분해합니다. 이 과정에서 복제된 씬의 모든 객체가 새로운 참조로 생성되며, 이 참조들이 정리되지 않으면 메모리 누수가 발생합니다.
// 첫 번째 코드에서는 복제된 씬을 <primitive object={scene} />로 직접 렌더링하므로, nodes와 materials로 분해하지 않아 추가 참조가 생성되지 않습니다.
// useGLTF의 내부 관리와의 차이:
// 첫 번째 코드에서는 useGLTF가 반환한 scene을 직접 사용하며, @react-three/drei의 내부 로직이 씬의 라이프사이클을 어느 정도 관리할 가능성이 있습니다. 예를 들어, useGLTF는 씬이 더 이상 렌더링되지 않을 때 일부 리소스를 정리하거나, Three.js 렌더러에서 씬을 제거할 수 있습니다.
// 반면, 두 번째 코드에서는 nodes와 materials를 수동으로 관리하므로, useGLTF의 잠재적 정리 메커니즘을 우회하게 됩니다. 이는 개발자가 직접 리소스 정리를 책임져야 함을 의미합니다. */
//   useEffect(() => {
//     return () => {
//       // 지오메트리 정리
//       Object.values(nodes).forEach(node => {
//         if (node.geometry) {
//           node.geometry.dispose();
//         }
//       });

//       // 머티리얼과 텍스처 정리
//       Object.values(materials).forEach(material => {
//         if (material.map) material.map.dispose();
//         if (material.normalMap) material.normalMap.dispose();
//         if (material.roughnessMap) material.roughnessMap.dispose();
//         material.dispose();
//       });

//       // 복제된 씬 정리
//       clone.traverse(object => {
//         if (object.isMesh) {
//           if (object.geometry) object.geometry.dispose();
//           if (object.material) {
//             if (Array.isArray(object.material)) {
//               object.material.forEach(mat => mat.dispose());
//             } else {
//               object.material.dispose();
//             }
//           }
//         }
//       });

//       // 애니메이션 믹서 정리
//       if (mixer) {
//         mixer.stopAllAction();
//         // mixer.uncacheRoot(group.current);
//         // Object.values(actions).forEach(action => {
//         //   if (action.getClip()) {
//         //     mixer.uncacheClip(action.getClip());
//         //   }
//         // });
//       }

//       // 씬을 렌더러에서 제거
//       if (group.current && group.current.parent) {
//         group.current.parent.remove(group.current);
//       }
//     };
//   }, [nodes, materials, clone, mixer, actions]);

//   // const moveToTarotPrinciple = e => {
//   //   e.stopPropagation();
//   //   navigate(TAROT_PRINCIPLE_PATH);
//   // };

//   // console.log(materials)
//   // 이벤트 핸들러 함수 정의(보류 name이 Number_01인 태그 onPointerOver 및 Out 임시 설정)

//   //!메모이제이션(useCallback)의 불필요:
//   // useCallback의 주요 목적은 함수를 메모이제이션하여 불필요한 재생성을 방지하는 것입니다. 하지만 이 경우 함수가 useEffect 내부에서만 사용되므로, 매 렌더링마다 새로 생성되어도 문제가 없습니다.

//   useGlowBallAction(
//     actions,
//     answerForm?.isWaiting,
//     answerForm?.isAnswered,
//     isReadyToShowDurumagi
//   );
//   useCrystalAction(
//     actions,
//     answerForm?.isWaiting,
//     answerForm?.isAnswered,
//     isReadyToShowDurumagi,
//     setMagicOn
//   );
//   useCandleAction(
//     actions,
//     time,
//     windowLeftDoorMaterialAction,
//     windowRightDoorMaterialAction,
//     leftDoorClick,
//     rightDoorClick,
//     answerForm?.isWaiting
//   );
//   let handleWindowLeftDoorAction = useWindowLeftDoorAction(
//     actions,
//     windowLeftDoorMaterialAction,
//     setWindowLeftDoorAction,
//     leftDoorClick,
//     setLeftDoorClick
//   );
//   let handleWindowRightDoorAction = useWindowRightDoorAction(
//     actions,
//     windowRightDoorMaterialAction,
//     setWindowRightDoorAction,
//     rightDoorClick,
//     setRightDoorClick
//   );

//   const openSpreadModal = async e => {
//     // 이벤트 버블링 방지
//     e.stopPropagation();
//     // 초기 상태 확인
//     if (
//       answerForm?.isWaiting === true ||
//       answerForm?.isAnswered === true ||
//       !visible ||
//       modalForm.spread === true ||
//       modalForm.tarot === true
//     )
//       return;

//     // 대기 상태가 아닐 때의 처리'
//     if (answerForm?.isWaiting === false) {
//       if (!(await hasAccessTokenForPreference()) && isNative) {
//         updateBlinkModalForLoginOpen(true);
//         return;
//       }
//       if (!hasAccessToken() && !isNative) {
//         updateBlinkModalForLoginOpen(true);
//         return;
//       }
//       if (
//         userInfo?.email === '' ||
//         userInfo?.email === undefined ||
//         userInfo?.email === null
//       )
//         return;
//       if (isClickedForTodayCard) return;
//       updateCardForm(prevCardForm => ({
//         ...prevCardForm,
//         shuffle: 0,
//         isReadyToShuffle: false,
//         isSuffleFinished: false,
//         spread: false,
//         flippedIndex: [],
//         selectedCardIndexList: [],
//       }));
//       //! 안정 기능을 위해
//       setAdsWatched(false);
//       // 모달 표시를 위한 타이머 설정
//       const modalTimer = setTimeout(() => {
//         toggleSpreadModal(true, 0, '', 0);
//       }, 100);

//       // visible 상태일 때 초기화
//       if (visible) {
//         handleResetAll();
//       }

//       // 컴포넌트 언마운트 시 타이머 정리
//       return () => clearTimeout(modalTimer);
//     }
//   };
//   return (
//     <group ref={group} {...props}>
//       <group name="Scene">
//         <group
//           name="ArmatureLeftLeg"
//           position={[4.251, 28.559, -20.085]}
//           rotation={[0, 0, 3.123]}
//           scale={3.97}
//           onClick={e => e.stopPropagation()}
//         >
//           <primitive object={nodes.Bone} />
//           <skinnedMesh
//             name="LeftLegObject"
//             geometry={nodes.LeftLegObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.LeftLegObject.skeleton}
//           />
//           <skinnedMesh
//             name="LeftShoeObject"
//             geometry={nodes.LeftShoeObject.geometry}
//             material={materials.staff_and_shoes}
//             skeleton={nodes.LeftShoeObject.skeleton}
//           />
//         </group>
//         <group
//           name="ArmatureRightLeg"
//           position={[-4.021, 28.049, -20.12]}
//           rotation={[0, 0, 3.123]}
//           scale={3.97}
//           onClick={e => e.stopPropagation()}
//         >
//           <primitive object={nodes.Bone_1} />
//           <skinnedMesh
//             name="RightLegObject"
//             geometry={nodes.RightLegObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.RightLegObject.skeleton}
//           />
//           <skinnedMesh
//             name="RightShoeObject"
//             geometry={nodes.RightShoeObject.geometry}
//             material={materials.staff_and_shoes}
//             skeleton={nodes.RightShoeObject.skeleton}
//           />
//         </group>
//         <group
//           name="ArmatureBody"
//           position={[0.016, 29.377, -20.087]}
//           rotation={[0.119, 0, 0]}
//           scale={5.114}
//           onClick={e => e.stopPropagation()}
//         >
//           <primitive object={nodes.Bone_2} />
//           <primitive object={nodes.neutral_bone} />
//           <skinnedMesh
//             name="BodyObject"
//             geometry={nodes.BodyObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.BodyObject.skeleton}
//           />
//           <skinnedMesh
//             name="TailObject"
//             geometry={nodes.TailObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.TailObject.skeleton}
//           />
//         </group>
//         <group
//           name="ArmatureLeftArm"
//           position={[5.197, 34.426, -19.996]}
//           rotation={[0, 0, -2.165]}
//           scale={4.54}
//           onClick={e => e.stopPropagation()}
//         >
//           <primitive object={nodes.Bone_3} />
//           <skinnedMesh
//             name="LeftArmObject"
//             geometry={nodes.LeftArmObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.LeftArmObject.skeleton}
//           />
//         </group>
//         <group
//           name="ArmatureRightArm"
//           position={[-5.803, 33.748, -20.042]}
//           rotation={[0, 0, 2.165]}
//           scale={4.54}
//           onClick={e => e.stopPropagation()}
//         >
//           <primitive object={nodes.Bone_4} />
//           <skinnedMesh
//             name="RightArmObject"
//             geometry={nodes.RightArmObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.RightArmObject.skeleton}
//           />
//           <skinnedMesh
//             name="StaffObject"
//             geometry={nodes.StaffObject.geometry}
//             material={materials.staff_and_shoes}
//             skeleton={nodes.StaffObject.skeleton}
//           />
//         </group>
//         <group
//           name="ArmatureHead"
//           position={[-0.596, 39.294, -19.944]}
//           scale={5.114}
//           onClick={e => {
//             if (answerForm?.isWaiting || answerForm?.isAnswered) return;
//             e.stopPropagation();
//             // if (detectDeviceHorizon() === true || detectComputer() === true) {
//             //   setTalkBubbleClosed(prev => !prev);
//             //   props?.setClickStatusForTalkBubble(prev => !prev);
//             // }
//             setTalkBubbleClosed(prev => !prev);
//             props?.setClickStatusForTalkBubble(prev => !prev);
//           }}
//         >
//           <primitive object={nodes.Bone_5} />
//           <group name="FaceObject">
//             <skinnedMesh
//               name="Face"
//               geometry={nodes.Face.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Face.skeleton}
//             />
//             <skinnedMesh
//               name="Face_1"
//               geometry={nodes.Face_1.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Face_1.skeleton}
//             />
//             <skinnedMesh
//               name="Face_2"
//               geometry={nodes.Face_2.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Face_2.skeleton}
//             />
//             <skinnedMesh
//               name="Face_3"
//               geometry={nodes.Face_3.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Face_3.skeleton}
//             />
//             <skinnedMesh
//               name="Face_4"
//               geometry={nodes.Face_4.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Face_4.skeleton}
//             />
//           </group>
//           <group
//             name="HatObject"
//             onClick={e => {
//               if (answerForm?.isWaiting || answerForm?.isAnswered) return;
//               e.stopPropagation();
//               // if (detectDeviceHorizon() === true || detectComputer() === true) {
//               //   setTalkBubbleClosed(prev => !prev);
//               //   props?.setClickStatusForTalkBubble(prev => !prev);
//               // }
//               setTalkBubbleClosed(prev => !prev);
//               props?.setClickStatusForTalkBubble(prev => !prev);
//             }}
//           >
//             <skinnedMesh
//               name="Hat"
//               geometry={nodes.Hat.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Hat.skeleton}
//             />
//             <skinnedMesh
//               name="Hat_1"
//               geometry={nodes.Hat_1.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Hat_1.skeleton}
//             />
//             <skinnedMesh
//               name="Hat_2"
//               geometry={nodes.Hat_2.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Hat_2.skeleton}
//             />
//           </group>
//           <skinnedMesh
//             name="MouthObject"
//             geometry={nodes.MouthObject.geometry}
//             material={materials.PaletteMaterial004}
//             skeleton={nodes.MouthObject.skeleton}
//             onClick={e => {
//               if (answerForm?.isWaiting || answerForm?.isAnswered) return;
//               e.stopPropagation();
//               // if (detectDeviceHorizon() === true || detectComputer() === true) {
//               //   setTalkBubbleClosed(prev => !prev);
//               //   props?.setClickStatusForTalkBubble(prev => !prev);
//               // }
//               setTalkBubbleClosed(prev => !prev);
//               props?.setClickStatusForTalkBubble(prev => !prev);
//             }}
//           />
//           <group
//             name="SunglassObject"
//             onClick={e => {
//               if (answerForm?.isWaiting || answerForm?.isAnswered) return;
//               e.stopPropagation();
//               // if (detectDeviceHorizon() === true || detectComputer() === true) {
//               //   setTalkBubbleClosed(prev => !prev);
//               //   props?.setClickStatusForTalkBubble(prev => !prev);
//               // }
//               setTalkBubbleClosed(prev => !prev);
//               props?.setClickStatusForTalkBubble(prev => !prev);
//             }}
//           >
//             <skinnedMesh
//               name="Sunglass"
//               geometry={nodes.Sunglass.geometry}
//               material={materials.PaletteMaterial005}
//               skeleton={nodes.Sunglass.skeleton}
//             />
//             <skinnedMesh
//               name="Sunglass_1"
//               geometry={nodes.Sunglass_1.geometry}
//               material={materials.PaletteMaterial004}
//               skeleton={nodes.Sunglass_1.skeleton}
//             />
//           </group>
//         </group>
//         <group
//           name="LightInCrystalBallSet"
//           position={[0.186, 42.09, 4.422]}
//           scale={1.033}
//         >
//           <mesh
//             name="CrystalBallLightObject"
//             geometry={nodes.CrystalBallLightObject.geometry}
//             material={materials.PaletteMaterial003}
//             rotation={[0, 0, 1.124]}
//             scale={1.351}
//           />
//         </group>
//         <group
//           name="CandleWickObject001"
//           position={[-16.761, 43.61, 10.186]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         >
//           <group
//             name="CandleLightSet001"
//             position={[-0.446, 0.146, 17.857]}
//             rotation={[Math.PI / 2, -Math.PI / 2, 0]}
//           >
//             <mesh
//               name="CandleLightObject001"
//               geometry={nodes.CandleLightObject001.geometry}
//               material={materials['candle_fire.001']}
//               position={[0, 0, -0.545]}
//               rotation={[0, 1.571, 0]}
//             />
//           </group>
//         </group>
//         <group
//           name="CandleWickObject"
//           position={[11.939, 43.61, 23.686]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         >
//           <group
//             name="CandleLightSet"
//             position={[-0.446, 0.146, 17.857]}
//             rotation={[Math.PI / 2, -Math.PI / 2, 0]}
//           >
//             <mesh
//               name="CandleLightObject"
//               geometry={nodes.CandleLightObject.geometry}
//               material={materials['candle_fire.001']}
//               position={[0, 0, -0.545]}
//               rotation={[0, 1.571, 0]}
//             />
//           </group>
//         </group>
//         <group
//           name="CandleWickObject003"
//           position={[17.839, 43.61, 10.186]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         >
//           <group
//             name="CandleLightSet003"
//             position={[-0.446, 0.146, 17.857]}
//             rotation={[Math.PI / 2, -Math.PI / 2, 0]}
//           >
//             <mesh
//               name="CandleLightObject003"
//               geometry={nodes.CandleLightObject003.geometry}
//               material={materials['candle_fire.001']}
//               position={[0, 0, -0.545]}
//               rotation={[0, 1.571, 0]}
//             />
//           </group>
//         </group>
//         <group
//           name="CandleWickObject002"
//           position={[-11.297, 43.61, 23.186]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         >
//           <group
//             name="CandleLightSet002"
//             position={[-0.446, 0.146, 17.857]}
//             rotation={[Math.PI / 2, -Math.PI / 2, 0]}
//           >
//             <mesh
//               name="CandleLightObject002"
//               geometry={nodes.CandleLightObject002.geometry}
//               material={materials['candle_fire.001']}
//               rotation={[0, 1.571, 0]}
//             />
//           </group>
//         </group>
//         <group
//           name="WindowLeftDoorSet001"
//           position={[10.41, 19.701, -58.632]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={[9.792, 9.886, 8.559]}
//           onClick={e => {
//             if (answerForm?.isWaiting || answerForm?.isnswered) return;
//             handleWindowLeftDoorAction(e);
//             const time = actions?.windowLeftDoorMaterialAction?.time ?? 0;
//             setTime(() => {
//               if (time === 0 && windowLeftDoorMaterialAction === false)
//                 return 2000;
//               return time * 1000;
//             });
//           }}
//           visible={visible}
//         >
//           <group
//             name="WindowLeftDoorObject"
//             position={[2.625, 0.03, 7.188]}
//             scale={[1.728, 1, 0.941]}
//           >
//             <mesh
//               name="WindowLeftDoor"
//               geometry={nodes.WindowLeftDoor.geometry}
//               material={materials.window_glass}
//             />
//             <mesh
//               name="WindowLeftDoor_1"
//               geometry={nodes.WindowLeftDoor_1.geometry}
//               material={materials.window_frame}
//             />
//           </group>
//         </group>
//         <group
//           name="WindowRightDoorSet"
//           position={[-10.768, 51.759, -58.632]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={[9.792, 9.886, 8.559]}
//           onClick={e => {
//             if (answerForm?.isWaiting || answerForm?.isAnswered) return;
//             handleWindowRightDoorAction(e);
//             const time = actions?.windowRightDoorMaterialAction?.time ?? 0;
//             setTime(() => {
//               if (time === 0 && windowRightDoorMaterialAction === false)
//                 return 2000;
//               return time * 1000;
//             });
//           }}
//           visible={visible}
//         >
//           <group
//             name="WindowRightDoorObject"
//             position={[-2.537, 0.039, 3.442]}
//             scale={[1.725, 1, 0.941]}
//           >
//             <mesh
//               name="WindowRightDoor"
//               geometry={nodes.WindowRightDoor.geometry}
//               material={materials.window_frame}
//             />
//             <mesh
//               name="WindowRightDoor_1"
//               geometry={nodes.WindowRightDoor_1.geometry}
//               material={materials.window_glass}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject001"
//           position={[11.783, 72.503, -36.725]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty001"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject001"
//               geometry={nodes.ChandelierCandleLightObject001.geometry}
//               material={materials['candle_fire.001']}
//               position={[-0.012, -0.194, 0.043]}
//               scale={0.1}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject002"
//           position={[11.89, 72.503, -48.241]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty002"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject002"
//               geometry={nodes.ChandelierCandleLightObject002.geometry}
//               material={materials['candle_fire.001']}
//               position={[0.018, 0.129, 0.027]}
//               scale={0.121}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject003"
//           position={[6.469, 72.503, -53.801]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty003"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject003"
//               geometry={nodes.ChandelierCandleLightObject003.geometry}
//               material={materials['candle_fire.001']}
//               position={[0.059, 0.185, 0.004]}
//               scale={0.135}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject004"
//           position={[-5.104, 72.503, -53.842]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty004"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject004"
//               geometry={nodes.ChandelierCandleLightObject004.geometry}
//               material={materials['candle_fire.001']}
//               position={[-0.014, 0.175, 0.04]}
//               scale={0.131}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject005"
//           position={[-10.63, 72.503, -48.4]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty005"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject005"
//               geometry={nodes.ChandelierCandleLightObject005.geometry}
//               material={materials['candle_fire.001']}
//               position={[-0.003, -0.043, 0.019]}
//               scale={0.105}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject006"
//           position={[-10.769, 72.503, -36.893]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty006"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject006"
//               geometry={nodes.ChandelierCandleLightObject006.geometry}
//               material={materials['candle_fire.001']}
//               position={[0.035, -0.153, 0.027]}
//               scale={0.094}
//             />
//           </group>
//         </group>
//         <group
//           name="ChandelierCandleWickObject007"
//           position={[-5.241, 72.503, -31.411]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty007"
//             position={[-0.024, -1.162, 18.393]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={14.398}
//           >
//             <mesh
//               name="ChandelierCandleLightObject007"
//               geometry={nodes.ChandelierCandleLightObject007.geometry}
//               material={materials['candle_fire.001']}
//               position={[0, -0.192, -0.129]}
//               scale={0.097}
//             />
//           </group>
//         </group>
//         <mesh
//           name="BookObject"
//           geometry={nodes.BookObject.geometry}
//           material={materials.book}
//           position={[-21, 34.8, 20.8]}
//           rotation={[-1.577, 0.001, -1.757]}
//           scale={5.069}
//           onClick={openTarotManualModal}
//           visible={visible}
//         />
//         <mesh
//           name="TreeObject"
//           geometry={nodes.TreeObject.geometry}
//           material={materials.tree}
//           position={[-62.694, 31.901, -29.785]}
//           rotation={[0, -0.387, 0]}
//           scale={[29.118, 38.014, 36.686]}
//           visible={visible}
//         />
//         <mesh
//           name="MagicCircleObject"
//           geometry={nodes.MagicCircleObject.geometry}
//           material={materials.magic_cirlce}
//           position={[0.419, 32.881, 11.263]}
//           scale={4.959}
//           visible={visible}
//         />
//         <mesh
//           name="TarotCardObject"
//           geometry={nodes.TarotCardObject.geometry}
//           material={materials.tarot_card}
//           position={[-6.382, 32.885, 18.7]}
//           rotation={[-1.571, -0.001, Math.PI]}
//           scale={0.079}
//           onClick={e => e.stopPropagation()}
//           visible={visible}
//         />
//         <mesh
//           name="GlowBallObject"
//           geometry={nodes.GlowBallObject.geometry}
//           material={materials['Material_0.029']}
//           position={[-30.005, 67.348, -30.87]}
//           scale={-4.062}
//           visible={visible}
//         />
//         <mesh
//           name="GlowBallObject001"
//           geometry={nodes.GlowBallObject001.geometry}
//           material={materials['Material_0.029']}
//           position={[-53.005, 39.348, -24.87]}
//           scale={8.601}
//           visible={visible}
//         />
//         <mesh
//           name="GlowBallObject002"
//           geometry={nodes.GlowBallObject002.geometry}
//           material={materials['Material_0.029']}
//           position={[-45.005, 65.348, -28.87]}
//           scale={8.275}
//           visible={visible}
//         />
//         <mesh
//           name="GlowBallObject003"
//           geometry={nodes.GlowBallObject003.geometry}
//           material={materials['Material_0.029']}
//           position={[-68.005, 64.348, -11.87]}
//           scale={11.038}
//           visible={visible}
//         />
//         <mesh
//           name="GlowBallObject004"
//           geometry={nodes.GlowBallObject004.geometry}
//           material={materials['Material_0.029']}
//           position={[-32.005, 48.348, -28.87]}
//           rotation={[0, -0.009, 0]}
//           scale={10.184}
//           visible={visible}
//         />
//         <group
//           name="RoomObject"
//           position={[-0.363, 20.158, -58.831]}
//           rotation={[-Math.PI / 2, 0, -0.003]}
//           scale={[1.035, 0.568, 0.568]}
//           onClick={e => {
//             e.stopPropagation();
//           }}
//           visible={visible}
//         >
//           <mesh
//             name="Room"
//             geometry={nodes.Room.geometry}
//             material={materials.table}
//           />
//           <mesh
//             name="Room_1"
//             geometry={nodes.Room_1.geometry}
//             material={materials.room_default}
//           />
//           <mesh
//             name="Room_2"
//             geometry={nodes.Room_2.geometry}
//             material={materials.PaletteMaterial004}
//           />
//         </group>
//         <mesh
//           name="MagicObject"
//           geometry={nodes.MagicObject.geometry}
//           material={materials.PaletteMaterial005}
//           position={[-16.26, 42.992, -3.378]}
//           rotation={[2.045, -0.603, -0.759]}
//           scale={-1.623}
//           visible={isMagicOn}
//         />
//         <mesh
//           name="CrystalBallCenterMaterial"
//           geometry={nodes.CrystalBallCenterMaterial.geometry}
//           material={materials.PaletteMaterial001}
//           position={[0.229, 42.02, 4.495]}
//           scale={0.563}
//         />
//         <mesh
//           name="CrystalBallObject"
//           geometry={nodes.CrystalBallObject.geometry}
//           material={materials.PaletteMaterial002}
//           position={[0.325, 42.149, 4.358]}
//           scale={[5.379, 5.021, 5.379]}
//           onClick={openSpreadModal}
//         />
//         <mesh
//           name="CrystalBallPlateObject"
//           geometry={nodes.CrystalBallPlateObject.geometry}
//           material={materials.crystal_ball_plate}
//           position={[0.145, 36.85, 4.358]}
//           scale={[3.473, 1.079, 3.473]}
//           visible={visible}
//         />
//         <mesh
//           name="CylinderObject001"
//           geometry={nodes.CylinderObject001.geometry}
//           material={materials.cylinder_and_simji}
//           position={[-16.756, 32.908, 10.176]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         />
//         <mesh
//           name="CandleObject001"
//           geometry={nodes.CandleObject001.geometry}
//           material={materials['candle.001']}
//           position={[-16.752, 39.24, 10.172]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={0.067}
//           visible={visible}
//         />
//         <mesh
//           name="WindowFrameObject"
//           geometry={nodes.WindowFrameObject.geometry}
//           material={materials.window_frame}
//           position={[0.006, 49.885, -57.345]}
//           rotation={[-Math.PI / 2, 0, 0]}
//           scale={[17.729, 9.886, 16.985]}
//           visible={visible}
//         />
//         <mesh
//           name="ChandelierCandleObject"
//           geometry={nodes.ChandelierCandleObject.geometry}
//           material={materials.candle}
//           position={[6.268, 68.846, -31.281]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         />
//         <mesh
//           name="ChandelierCandleWickObject"
//           geometry={nodes.ChandelierCandleWickObject.geometry}
//           material={materials['cylinder_and_simji.001']}
//           position={[6.26, 72.503, -31.269]}
//           rotation={[-Math.PI / 2, 0, -0.007]}
//           scale={0.056}
//           visible={visible}
//         >
//           <group
//             name="Empty"
//             position={[-0.024, -1.162, 20.187]}
//             rotation={[Math.PI / 2, 0, 0]}
//             scale={[17.937, 17.938, 17.938]}
//           >
//             <mesh
//               name="ChandelierCandleLightObject"
//               geometry={nodes.ChandelierCandleLightObject.geometry}
//               material={materials['candle_fire.001']}
//               position={[0.002, -0.225, -0.064]}
//               scale={0.094}
//             />
//           </group>
//         </mesh>
//       </group>
//     </group>
//   );
// });

// useGLTF.preload(MODEL_PATH);
